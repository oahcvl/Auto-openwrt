#
#
# 感谢p3terx大神的一键编译脚本
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# <https://github.com/P3TERX/Actions-OpenWrt.git>
#


name: 可选编译

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      source_branch:
        description: "选择机型"
        required: false
        default: "Lede_x86_64"
        type: choice
        options:
          - Lede_x86_64
          - Lienol_x86_64
          - Project_x86_64
          - Lede_redmi_ac2100
          - Lede_newifi_d2
          - Project_newifi_d2

#定时触发开始编译(开启定时编译请先确定SSH处在关闭状态,要不然SSH没人管,会卡SSH编译失败)
#  schedule:
#    - cron: 0 8 */5 * *

env:
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  SCKEY: ${{ secrets.SCKEY }}
  GITHUB_RELEASE: ""
  TZ: Asia/Shanghai

jobs:   
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id
    steps:
      - name: 准备结束
        uses: actions/checkout@v4

      - name: 检测脚本设置
        run: |
          source "${GITHUB_WORKSPACE}/build/${{inputs.source_branch}}/settings.ini"
          echo "REPO_URL=$REPO_URL" >> $GITHUB_ENV
          echo "REPO_BRANCH=$REPO_BRANCH" >> $GITHUB_ENV
          echo "CONFIG_FILE=$CONFIG_FILE" >> $GITHUB_ENV
          echo "WXFB_MESSAGE=$WXFB_MESSAGE" >> $GITHUB_ENV
          echo "DIY_P1_SH=$DIY_P1_SH" >> $GITHUB_ENV
          echo "DIY_P2_SH=$DIY_P2_SH" >> $GITHUB_ENV
          echo "SSH_ACTIONS=$SSH_ACTIONS" >> $GITHUB_ENV
          echo "UPLOAD_BIN_DIR=$UPLOAD_BIN_DIR" >> $GITHUB_ENV
          echo "UPLOAD_CONFIG=$UPLOAD_CONFIG" >> $GITHUB_ENV
          echo "UPLOAD_FIRMWARE=$UPLOAD_FIRMWARE" >> $GITHUB_ENV
          echo "UPLOAD_COWTRANSFER=$UPLOAD_COWTRANSFER" >> $GITHUB_ENV
          echo "SERVERCHAN_SCKEY=$SERVERCHAN_SCKEY" >> $GITHUB_ENV
      
      - name: PUSHPLUS信息通知
        if: env.SERVERCHAN_SCKEY == 'true'
        run: |
          curl -k --data token="${{secrets.PUSH_PLUS_TOKEN}}" --data title="开始编译【${{inputs.source_branch}}】" --data "content=🎉 主人：您【${{inputs.source_branch}}】固件编译中,请耐心等待......" "http://www.pushplus.plus/send"
        
      - name: 开始安装编译所需系统
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
  
      - name: 克隆源码
        working-directory: /workdir
        run: |
          df -hT $PWD
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
  
      - name: 加载源,patch补丁和自定义设置
        run: |
          cp -Rf `find ./ -maxdepth 1 -type d ! -path './openwrt' ! -path './'` openwrt
          cd openwrt
          echo "Apply patches"
          if [ -n "$(ls -A "build/${{inputs.source_branch}}/patches" 2>/dev/null)" ]; then
          (
            find "build/${{inputs.source_branch}}/patches" -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d './' -p0 --forward" || true
          )
          fi
          if [ -f "build/${{inputs.source_branch}}/$DIY_P1_SH" ]; then
          (
            chmod +x build/${{inputs.source_branch}}/$DIY_P1_SH
            /bin/bash "build/${{inputs.source_branch}}/$DIY_P1_SH"
          )
          fi
          ./scripts/feeds clean
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          if [ -n "$(ls -A "build/${{inputs.source_branch}}/files" 2>/dev/null)" ]; then
           cp -rf build/${{inputs.source_branch}}/files files
          fi
          if [ -n "$(ls -A "build/${{inputs.source_branch}}/diy" 2>/dev/null)" ]; then
           cp -Rf build/${{inputs.source_branch}}/diy/* ./
          fi        
          if [ -f "build/${{inputs.source_branch}}/$DIY_P2_SH" ]; then
          (
            chmod +x build/${{inputs.source_branch}}/$DIY_P2_SH
            /bin/bash "build/${{inputs.source_branch}}/$DIY_P2_SH"
          )
          fi
           mv build/${{inputs.source_branch}}/$CONFIG_FILE .config
          make defconfig
          [ $(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/') == generic ] && DEVICE_NAME=$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/CONFIG_TARGET_(.*)_DEVICE_.*=y/\1/') || DEVICE_NAME=$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/')
          DEVICE_NAME=`echo ${DEVICE_NAME/xiaomi_redmi-router/redmi}`
          echo "DEVICE_NAME=$DEVICE_NAME" >> $GITHUB_ENV
      
      - name: SSH远程连接服务器配置固件
        uses: P3TERX/ssh2actions@main
        if: env.SSH_ACTIONS == 'true' || contains(github.event.action, 'ssh')
  
      - name: 下载软件包
        id: package
        run: |
          cd openwrt
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
  
      - name: 开始编译固件
        id: compile
        run: |
          cd openwrt
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          echo "date=$(date "+%Y-%m-%d %H.%M")" >> $GITHUB_ENV
          echo "date1=$(date +'%Y年%m月%d号-%H点%M分')" >> $GITHUB_ENV
          echo "date2=$(date +'%Y%m%d-%H%M')" >> $GITHUB_ENV
      
      - name: 上传bin文件夹(固件+ipk)在github空间
        uses: actions/upload-artifact@v2
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: OpenWrt_bin_${{inputs.source_branch}}_${{ env.date }}
          path: openwrt/bin
  
      - name: 整理固件文件夹
        id: organizer
        run: |
          mkdir config
          find openwrt/bin/targets/ -name "*config.buildinfo*" | xargs -i mv -f {} config        
          cd openwrt/bin/targets/*/*
          rm -rf packages && mkdir packages
          find -name "*.buildinfo*" | xargs -i mv -f {} packages
          find -name "*sha256sums*" | xargs -i mv -f {} packages
          find -name "*kernel.bin*" | xargs -i mv -f {} packages
          find -name "*kernel1.bin*" | xargs -i mv -f {} packages
          find -name "*rootfs*" | xargs -i mv -f {} packages
          find -name "*.manifest*" | xargs -i mv -f {} packages
          find -name "*vmlinuz*" | xargs -i mv -f {} packages
          find -name "*esxi.vmdk*" | xargs -i mv -f {} packages
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT
          
      - name: 上传.config配置文件在github空间    
        if: steps.organizer.outputs.status == 'success' && env.UPLOAD_CONFIG == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: .config_${{inputs.source_branch}}_${{ env.date }}
          path: ./config
  
      - name: 上传固件在github空间
        uses: actions/upload-artifact@v2
        if: steps.organizer.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true'
        with:
          name: OpenWrt_firmware_${{inputs.source_branch}}_${{ env.date }}
          path: ${{ env.FIRMWARE }}
      
      - name: 安装「奶牛快传」CLI 的命令
        run: |
          wget https://cli.cowtransfer.com/latest/cowtransfer-cli-linux-amd64 -O cowtransfer
          chmod +x cowtransfer
          sudo mv cowtransfer /usr/local/bin/

      - name: 上传固件到「奶牛快传」
        if: steps.organizer.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
        env:
          COWTRANSFER_API_KEY: ${{ secrets.COWTRANSFER_API_KEY }}
        run: |
          # 上传文件并获取响应
          response=$(cowtransfer upload --api-key "$COWTRANSFER_API_KEY" --file-path ${FIRMWARE} --remote-path "云编译/${{inputs.source_branch}}/" --json)
          # 解析响应以获取下载链接
          download_link=$(echo "$response" | jq -r '.data.link')
          # 将下载链接存储在输出中，以便其他步骤可以使用
          echo "download_link=$download_link" >> $GITHUB_OUTPUT
      
      - name: PUSHPLUS信息通知
        if: steps.organizer.outputs.status == 'success' && env.SERVERCHAN_SCKEY == 'true'
        run: |
          curl -k --data token="${{secrets.PUSH_PLUS_TOKEN}}" --data title="[${{inputs.source_branch}}]编译成功" --data "content=我亲爱的✨主人✨：您【${{inputs.source_branch}}】的固件顺利编译完成了！🎉 固件下载地址✨：${{ env.GITHUB_RELEASE }},奶牛快传：${{ env.COWTRANSFER_URL }}" "http://www.pushplus.plus/send"
